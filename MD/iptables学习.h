/* iptables学习 */

   1.) Iptables的命令选项
　　iptables [-t tables] command option parameter target
　　-A 在链尾添加一条规则
　　-C 将规则添加到用户定义链之前对其进行检查
　　-D 从链中删除一条规则
　　-E 重命名用户定义的链，不改变链本身
　　-F 清空链，删除链上的所有规则
　　-I 在链中插入一条规则
　　-L 列出某个链上的规则，如iptables –L INPUT 列出INPUT链的规则
　　-N 创建一个新链
　　-P 定义某个链的默认策略
　　-R 替换链上的某条规则
　　-X 删除某个用户相关的链
　　-Z 将所有表的所有链的字节和数据包计数器清零

  2.) Iptables的命令参数

　　-p -–protocol
　　应用于数据包的协议类型，可以是TCP UDP ICMP或ALL。！也可使用。
　　当使用-p tcp时，还可使用其他可以选项，以便允许进一步定义规则。选项包括：
　　--sport 允许指定匹配数据包源端口.port1:port ,表示port1和port2之间的所有端口
　　--dport 目的端口，和--sport雷同。

　　当使用-p !udp时，也有特殊的选项供使包括：
　　--sport,--dport,与-p tcp 相同，只不过用以用于UDP包。

　　使用-p icmp参数时，只有一个选项可用。
　　--icmp-type，允许在过滤规则中指定icmp类型。

　　-s –-source 指定数据包的源地址。该参数后跟一个IP地址，一个带有sub-net mask的网络地址，或一个主机名。(不建议使用主机名)
　　-d,--destination 数据包的目的地址，同-s.
　　-j,--jump 用于指定一个target,告诉规则将该匹配的数据包发送到该 target。Target可以是ACCEPT,DROP,QUEUE,RETURN.如果没有-j,那么不会对数据包进行任何操作，只是将计数器加1。
    -i --in-interface ,对于INPUT FORWARD PREROUTING链，该参数指定数据包到达服务器时所使用的端口。
　　-o --out-interface,对于OUTPUT FORWARD POSTROUTING链，该参数指定数据包离开服务器时使用的端口。

  3.) Iptables的命令target

　　创建规则的最后一步是指定Iptables对数据包的操作。只要某一规则匹配该数据包，就不会再有别的规则的操作。内建的target有：ACCEPT DROP QUEUE RETURN。
　　ACCEPT：允许数据包通过，到达目的地。
　　DROP：拒绝数据包通过，丢弃该包。
　　QUEUE：将数据包发送回到用户应用程序处理。
　　RETURN：不再根据当前链的其他规则来检查数据包，而是直接返回，继续被发送到其目的地址，或下一个链。
  
  1. 创建新的自定义链 -N
  2. 删除自定义链 -X
  3. 改变默认策略 -P
  4. 显示链规则 -L
  5. 清空链中的规则 -F
  6. 将包过滤统计信息清零 -Z
 
如果在链中维护具体规则：
  1. 追加新的规则 -A
  2. 插入新的规则 -I
  3. 替换旧的规则 -R
  4. 删除旧的规则 -D
  
  特定的过滤规则：
  上面我们已经看到可以使用-p指定协议，-s指定源地址，但还有很多可以用来过滤的条件匹配符。
  下面我们分别介绍：
 
  源地址与目标地址
  源地址(-s,--source或--src)，目标地址(-d,--destination或--dst)有四种使用方式：
  最常用的是使用名称，比如"localhost"或者"http://www.kernel.org"。
  第二种方法是使用IP地址如"127.0.0.1"。
  第三四种方法可以匹配IP地址区域，如"199.95.207.0/24"或"199.95.207.0/255.255.255.0"。它们都可以匹配199.95.207.0到199.95.207地址可以使用0/0匹配所有地址。
  # iptables -A INPUT -s 0/0 -j DROP 拒绝所有源地址访问本机
 
  取反匹配
  很多标签"-s","-d"等都可以在后面添加"!"以表示否定匹配，如"-s ! localhost"将匹配所有非本地源地址
  
  协议匹配
  匹配协议可以使用-p标签,协议的指定可以使用数字编号（如果你知道协议的编号)或使用名称(如"TCP","UDP","ICMP"等)。协议名称前可以添加"!"如"-p  ! TCP"匹配所有非TCP协议数据包
  
  接口匹配
  "-i(--in-interface)"和"-o(--out-interface)"匹配指定的接口。接口是真实的物理网卡接口，-i(数据包从哪个网卡进来的),-o(数据从哪个网卡出去的)。你可以使用ifconfig命令查看哪些接口是开启的。
  注意：在INPUT链不可以使用-o选项，因为入站的数据不走出站接口。所以在INPUT链中的-o规则将无法匹配任何数据。
        同理，在OUTPUT链中不可以使用-i选项。
		
数据段匹配
  很多数据包因为太大无法一次完成数据的传输。此时数据包将被分割为数据片段再发送出去。接收端接受完数据后将把这些数据片段重新组合成完整的数据包。
  但问题在于当数据被分割后，只有前面的初始数据片段包含全部的数据头部信息（IP,TCP,UDP,ICMP等），后续的数据片段仅包含数据包头部信息的一部分信息。这时去再检查后续数据片段的头部信息是不可能的。
  当然，如果你想匹配第二个及后面被分片的数据，可以使用"-f"选项。
# iptables -A OUTPUT -f -d 192.168.1.1 -j DROP 丢弃发送至192.168.1.1的所有数据以及分片数据